{"version":3,"sources":["Dae.jsx","Weather.jsx","King.jsx","index.js"],"names":["Dae","useState","am","pm","time","Date","getHours","useEffect","Weather","temp1","temp2","temp3","weather1","temp","humidity","pressure","main","speed","temp_min","temp_max","country","name","sunset","sunrise","Math","ceil","fullDate","month","day","hours","min","hour1","year","date","min1","date1","setdate1","time1","time2","countrycode","setInterval","getMonth","getDate","getFullYear","getMinutes","dam","timstr","da","dam1","dam2","da1","timstr1","className","src","alt","King","searchValue","setsearchValue","weatherset","mood","setmood","getweatherinfo","a","apiurl","fetch","Data","json","weatherData","weather","wind","sys","alert","type","placeholder","onChange","e","target","value","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d239497.chunk.js","sourcesContent":["import React, {useState,useEffect} from 'react'\r\n\r\nconst Dae = () => {let [am,pm] = useState();   let time=new Date().getHours();\r\nuseEffect(() => {\r\n   if(time<=12&& time>=0)\r\n   { pm(\"am\");\r\n     }\r\n   else\r\n     {pm(\"pm\");\r\n   }\r\n\r\n\r\n// eslint-disable-next-line\r\n},[])\r\n \r\nreturn(<h3>{am}</h3>);\r\n}\r\n\r\nexport default Dae;\r\n","import React, {useState}  from 'react'\r\nimport Dae from \"./Dae\";\r\n\r\n  const Weather = ({weather1}) => // passes objects \r\n {\r\n const {temp,humidity,pressure,main,speed,temp_min,temp_max,country,name,sunset,sunrise} =weather1;\r\n     \r\n   let temp1,temp2,temp3; \r\n     temp1=Math.ceil(temp-273.15);\r\n     temp2=Math.ceil(temp_min-273.15);    temp3=Math.ceil(temp_max-273.15);// temp k to c\r\n    let [date1,setdate1]=useState();\r\n    let [time1,time2]=useState();\r\n\r\n    let countrycode=`https://www.countryflags.io/${country}/flat/32.png`;//country FLAG IMAG\r\n let fullDate,time,month,day,hours,min,hour1,year,date,min1;\r\n    setInterval(() => {// code for time and date\r\n       date=new Date();\r\n   month=date.getMonth();\r\n   day=date.getDate();\r\n   year=date.getFullYear();\r\n   hours=date.getHours();\r\n   min=date.getMinutes();\r\n   (min<10)? min1=`0${min}`:min1=min;;\r\n   \r\n   (hours>=12)?hour1=hours-12:hour1=`${hours}`;\r\n     time=`${hour1 }:${ min1}`;\r\n     fullDate=`${day }:${ month+1}:${ year}`;\r\n    setdate1(fullDate);\r\n    time2(time);\r\n    }, 1000);\r\n\r\n    let se=sunset;let dam,timstr;//sunset time code \r\n    let da=new Date(se*1000);\r\n    (da.getHours()>=12)?dam=da.getHours()-12: dam=da.getHours();\r\n    (da.getMinutes<=9)? timstr=`${dam}:0${da.getMinutes()}`:timstr=`${dam}:${da.getMinutes()}`;\r\n   \r\n    let se1=sunrise;let dam1,dam2;//sunrise time code\r\n    let da1=new Date(se1*1000);\r\n    (da1.getHours()>=12)? dam1=da1.getHours()-12:dam1=da1.getHours();\r\n     (da1.getMinutes()<=9)?dam2=`0${da1.getHours()}`:dam2=da1.getMinutes();\r\n\r\n    let timstr1=`${dam1}:${dam2}`;\r\n\r\n    return (\r\n        <>\r\n \r\n\r\n<div className='weather'>\r\n  <div className='county'><h2>{main}</h2><br /><h4>{name},{country}</h4><img src={countrycode} alt=\"country flag\" /></div>\r\n  <div className='temp'><h1>{temp1}°c </h1><h5>temp Min:{temp2}°c</h5> <h5>temp max:{temp3}°c</h5></div>\r\n  \r\n  <div className='time'>\r\n    <h2><img src=\"https://img.icons8.com/material-outlined/24/000000/calendar--v3.png\" alt=\"my img\"/><br />{date1}</h2><br />\r\n  <div className='dae'> <h3>{time1} </h3><Dae /></div> \r\n  </div>\r\n</div>\r\n<div className='kam'>\r\n  <div className=\"box0\"><img src=\"https://img.icons8.com/material-outlined/24/000000/sunrise.png\" alt='my pic' /><h4>sunrise</h4><br /><h4>{timstr1} am</h4></div>\r\n  <div className='box1'><img src=\"https://img.icons8.com/material-outlined/24/000000/sunset.png\" alt='my pic' /><h4>sunset</h4><br /><h4>{timstr} pm</h4></div>\r\n  <div className='box2'><img src=\"https://img.icons8.com/material-outlined/24/000000/humidity.png\" alt='my pic' /><h4>humidity </h4><br /><h4>{humidity} %</h4></div>\r\n  <div className='box3'><img src=\"https://img.icons8.com/material-outlined/24/000000/pressure.png\" alt='my pic' /><h4>pressure</h4><br /><h4>{pressure} MM</h4></div>\r\n  <div className='box4'><img src=\"https://img.icons8.com/material-sharp/24/000000/wind-speed-98-102.png\" alt='my pic' /><h4>wind speed </h4><br /><h4>{speed} km/hr</h4></div>\r\n</div>\r\n \r\n      </>\r\n    )\r\n}\r\nexport default Weather;","import React, {useState,useEffect} from 'react';\r\nimport Weather from './Weather';\r\n const King = ( ) => {\r\n   const [searchValue,setsearchValue]=useState(\"Jammu\");//here default place is jammu\r\n   const [weather1,weatherset]=useState({}); \r\n  const [mood,setmood]=useState();\r\n  useEffect(() => {// on load it will call firs tym and show the weather report of default place \r\n    getweatherinfo();// eslint-disable-next-line\r\n     },[])\r\n   const getweatherinfo=async()=>{\r\n\r\n     try {\r\n     let apiurl=\"https://api.openweathermap.org/data/2.5/weather?q=\"+searchValue+\"&appid=170b40dde43a8167aa5d8befa3f4365b\";//api \r\nlet Data= await fetch(apiurl);// fetching data\r\nlet weatherData=await Data.json(); // converting the data\r\nconst {temp,temp_min,temp_max,humidity,pressure}=weatherData.main;\r\nconst{main}=weatherData.weather[0];\r\nconst {name}=weatherData;\r\nconst {speed}=weatherData.wind;\r\nconst {country,sunset,sunrise}=weatherData.sys;\r\nconst weatherDataInfo={\r\n  temp,humidity,pressure,main,temp_min,temp_max,speed,country,name,sunset,sunrise\r\n};   //putting all objects in it\r\nweatherset(weatherDataInfo); //passing weatherinfo in to the weatherDataInfo\r\n\r\n\r\nif(main)// it is weather mood means rain,sunny,clear,snow ,haze etc\r\n{\r\n\r\n  switch (main) {\r\n    case \"Clouds\": \r\nsetmood(\"https://img.icons8.com/fluent/144/000000/weather.png\" )\r\n\r\n      break;\r\n  case \"Rain\":\r\n  setmood ( \"https://img.icons8.com/office/160/000000/heavy-rain.png\")//rainy\r\n    break;\r\n    case 'Clear':\r\n   setmood(\"https://img.icons8.com/emoji/96/000000/sun-emoji.png\");\r\n   \r\n   \r\n      break;\r\n      case \"Haze\":\r\n        setmood(\"https://img.icons8.com/fluent/96/000000/fog-day.png\")\r\n        break;\r\n        case \"Snow\":\r\n          setmood(\"https://img.icons8.com/fluent/96/000000/snow.png\")\r\n      break;\r\n      case \"Drizzle\":\r\n        setmood(\"https://img.icons8.com/ios/150/000000/rainy-weather.png\");\r\n        break;\r\n\r\n      default:\r\n        setmood(\"https://img.icons8.com/ios/100/000000/sky.png\")\r\n  }\r\n}\r\n\r\n\r\n     } catch (error) {//it will show error if there is any problem in api\r\n       alert(\"city not found\");\r\n     }\r\n     \r\n   }\r\n  \r\n\r\n  return (<> <div className='main'> \r\n  <div className='input'><input type=\"search\" placeholder='Enter your city'  onChange={(e)=>setsearchValue(e.target.value)} value={searchValue}/>\r\n   <button onClick={getweatherinfo} type='button'><img src=\"https://img.icons8.com/material-two-tone/24/000000/search.png\" alt=\"search \" /></button></div>\r\n  <div className='img'>\r\n  <img src={mood}alt=\"weather img\" />\r\n  </div>\r\n   < Weather weather1={weather1}\r\n   //spreas operatro =takes all ojects \r\n  \r\n  /></div></>\r\n  ) \r\n}\r\nexport default King;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport King from './King'\nimport './index.css'\nReactDOM.render(<><King/></>,document.getElementById(\"root\"));\n     "],"sourceRoot":""}